
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 用户自定义配置（该文件放一般性配置，可覆盖~/.vimrc里的配置，若要增加、卸载插件，请放入~/.vimrc.custom.plugins）
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 开启相对行号
" set relativenumber  

" 开启鼠标
set mouse=a

" 设置光标所在列高亮
set cursorcolumn

" indentLine 开启代码对齐线
let g:indentLine_enabled = 1

" markdown
" let system = system('uname -s')
" if system == "Darwin\n"
"     let g:mkdp_path_to_chrome = "/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome"
" else
"     let g:mkdp_path_to_chrome = '/usr/bin/google-chrome-stable %U'
" endif
" nmap <silent> <F7> <Plug>MarkdownPreview
" imap <silent> <F7> <Plug>MarkdownPreview
" nmap <silent> <F8> <Plug>StopMarkdownPreview
" imap <silent> <F8> <Plug>StopMarkdownPreview

" Doxygen
" let g:DoxygenToolkit_authorName="chxuan, 787280310@qq.com"
" let s:licenseTag = "Copyright(C)\<enter>"
" let s:licenseTag = s:licenseTag . "For free\<enter>"
" let s:licenseTag = s:licenseTag . "All right reserved\<enter>"
" let g:DoxygenToolkit_licenseTag = s:licenseTag
" let g:DoxygenToolkit_briefTag_funcName="yes"
" let g:doxygen_enhanced_color=1
" let g:DoxygenToolkit_commentType="Qt"

" vim-preview
noremap <m-u> :PreviewScroll -1<cr> " Alt + u 往上滚动预览窗口
noremap <m-d> :PreviewScroll +1<cr> " Alt + d 往下滚动预览窗口
inoremap <m-u> <c-\><c-o>:PreviewScroll -1<cr>
inoremap <m-d> <c-\><c-o>:PreviewScroll +1<cr>
" 在quickfix窗口按 p 打开预览窗口（配合 grepper 插件很实用）
autocmd FileType qf nnoremap <silent><buffer> p :PreviewQuickfix<cr>
autocmd FileType qf nnoremap <silent><buffer> P :PreviewClose<cr>
noremap <m-n> :PreviewSignature!<cr> " Alt + n 提示函数声明
inoremap <m-n> <c-\><c-o>:PreviewSignature!<cr>
noremap <leader>gg :PreviewTag<cr>
noremap <leader>gc :PreviewClose<cr>
"vim-which-key
set timeoutlen=300 "vim-which-key 不要关闭选项 timeout
nnoremap <silent> <leader>      :<c-u>WhichKey '<Space>'<CR>
nnoremap <silent> <localleader>      :<c-u>WhichKey '\'<CR>
nnoremap <silent> g :<c-u>WhichKey "g"<CR>
"nnoremap <silent> <C-w> :<c-u>WhichKey '<C-w>'<CR>
"nnoremap <silent> <Alt> :<c-u>WhichKey '<Alt>'<CR>
nmap <C-h>q :qa!<cr>

" <localleader>f{char} to move to {char}
map  <leader>c <Plug>(easymotion-bd-f)
nmap <leader>c <Plug>(easymotion-overwin-f)
" s{char}{char} to move to {char}{char}
map <leader>c <Plug>(easymotion-overwin-f2)
nmap <leader>c <Plug>(easymotion-overwin-f2)
" Move to line
map <leader>j <Plug>(easymotion-j)
map <leader>k <Plug>(easymotion-k)
map <leader>l <Plug>(easymotion-overwin-line)
" Move to word
map  <leader>w <Plug>(easymotion-bd-w)
nmap <leader>w <Plug>(easymotion-overwin-w)

" 分屏窗口移动
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" 复制当前选中到系统剪切板
vmap <leader><leader>y "+y

" 将系统剪切板内容粘贴到vim
nnoremap <leader><leader>p "+p

" vim-easymotion
let g:EasyMotion_smartcase = 1


" LeaderF
"nnoremap <leader>f :LeaderfFile .<cr>
let g:Lf_WildIgnore = {
            \ 'dir': ['.svn','.git','.hg','.vscode','.wine','.deepinwine','.oh-my-zsh'],
            \ 'file': ['*.sw?','~$*','*.bak','*.exe','*.o','*.so','*.py[co]']
            \}
let g:Lf_UseCache = 0
" Leaderf Settings
let g:Lf_DefaultMode = "NameOnly"
" don't show the help in normal mode
let g:Lf_HideHelp = 1
let g:Lf_UseCache = 0
let g:Lf_UseVersionControlTool = 0
let g:Lf_IgnoreCurrentBufferName = 1
" Show icons, icons are shown by default
let g:Lf_ShowDevIcons = 1
" For GUI vim, the icon font can be specify like this, for example
let g:Lf_DevIconsFont = "DroidSansM Nerd Font Mono"
let g:Lf_QuickSelect = 1
" popup mode
let g:Lf_WindowPosition = 'popup'
let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font': "DejaVu Sans Mono for Powerline" }
let g:Lf_PreviewResult = {'Function': 0, 'BufTag': 0 }

let g:Lf_ShortcutF = "<localleader>ff"
let g:Lf_ShortcutB = "<localleader>fb"

noremap <localleader>ff :<C-U><C-R>=printf("LeaderfFile %s", "")<CR><CR>
noremap <localleader>f. :<C-U><C-R>=printf("LeaderfFile ./ %s", "")<CR><CR>
noremap <localleader>fb :<C-U><C-R>=printf("Leaderf buffer %s", "")<CR><CR>
noremap <localleader>fm :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>
noremap <localleader>ft :<C-U><C-R>=printf("LeaderfBufTagAll %s", "")<CR><CR>
noremap <localleader>fc :<C-U><C-R>=printf("Leaderf cmdHistory %s", "")<CR><CR>
noremap <localleader>fs :<C-U><C-R>=printf("Leaderf searchHistory %s", "")<CR><CR>
noremap <localleader>fa :<C-U><C-R>=printf("Leaderf! rg --all-buffers %s",  expand("<cword>"))<CR><CR>
noremap <localleader>fg :<C-U><C-R>=printf("Leaderf! rg -g \"*.c\" -g \"*.h\" -g \"*.cpp\"  %s",  expand("<cword>"))<CR><CR>
noremap <localleader>fr :<C-U><C-R>=printf("LeaderfRgInteractive %s", "")<CR><CR>
noremap <localleader>fo :<C-U>Leaderf! rg --recall<CR>

noremap <C-B> :<C-U><C-R>=printf("Leaderf! rg --current-buffer -e %s ", expand("<cword>"))<CR>zz
noremap <C-F> :<C-U><C-R>=printf("Leaderf! rg -e %s ", expand("<cword>"))<CR>
" search visually selected text literally
xnoremap gf :<C-U><C-R>=printf("Leaderf! rg -F -e %s ", leaderf#Rg#visual())<CR>
noremap go :<C-U>Leaderf! rg --recall<CR>

" should use `Leaderf gtags --update` first
noremap <localleader>lfu :Leaderf gtags --update<CR>
noremap <localleader>lfh :LeaderfHistoryCmd<CR>
let g:Lf_GtagsAutoGenerate = 1
let g:Lf_Gtagslabel = 'native-pygments'
noremap <localleader>gr :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <localleader>gb :<C-U><C-R>=printf("Leaderf! gtags --by-context --auto-jump %s", expand("<cword>"))<CR><CR>
noremap <localleader>gd :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <localleader>gg :<C-U><C-R>=printf("Leaderf! gtags -g %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <localleader>gs :<C-U><C-R>=printf("Leaderf! gtags -s %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <localleader>go :<C-U><C-R>=printf("Leaderf! gtags --recall %s", "")<CR><CR>
noremap <localleader>gn :<C-U><C-R>=printf("Leaderf gtags --next %s", "")<CR><CR>
noremap <localleader>gp :<C-U><C-R>=printf("Leaderf gtags --previous %s", "")<CR><CR>

autocmd BufRead,BufNewFile *.py,*.js,*.html,*.css,*.c,*.h call CreateCtags()
function! CreateCtags()
    " 检测是否存在 ctags 命令
    if !executable('ctags')
        echo "ctags is not installed or not in the PATH"
        return
    endif

    " 检测当前目录下是否存在 ctags 文件
    if ((filereadable('.tags') || filereadable('../.tags') || filereadable('../../.tags') || filereadable('../../../.tags')) && !(filereadable('tags') || filereadable('../tags') || filereadable('../../tags') || filereadable('../../../tags') || filereadable('../../../../tags')))
	" 使用 ctags 命令生成 tags 文件
	let l:git_root = system('git rev-parse --show-toplevel')
	if l:git_root =~ 'Not\ a\ git\ repository'
		echo "Not a git repository, Generating ctags file in pwd..."
		silent! execute '!ctags -a -R --exclude=.git --exclude=log .'
	else
		echo "Is a git repository, Generating ctags file in git root dir..."
		:lcd `=l:git_root`
		silent! execute '!ctags -a -R --exclude=.git --exclude=log `=l:git_root`'
	endif
    endif
endfunction

" Tmux settings
let g:tmux_navigator_no_mappings = 1

noremap <silent> {Left-Mapping} :<C-U>TmuxNavigateLeft<cr>
noremap <silent> {Down-Mapping} :<C-U>TmuxNavigateDown<cr>
noremap <silent> {Up-Mapping} :<C-U>TmuxNavigateUp<cr>
noremap <silent> {Right-Mapping} :<C-U>TmuxNavigateRight<cr>
noremap <silent> {Previous-Mapping} :<C-U>TmuxNavigatePrevious<cr>

set clipboard=unnamedplus
set clipboard+=unnamed
" 支持在Visual模式下，通过C-y复制到系统剪切板
vnoremap <C-y> "+y
" 支持在normal模式下，通过C-p粘贴系统剪切板  shift+insert
nnoremap <A-p> "*p
inoremap <A-p> "*p

nnoremap y "+y
vnoremap y "+y

nmap <leader>s :w<cr>
nmap <leader>q :bd<cr>
nmap <leader>x :qa<cr>
nmap <leader>bn :bn<cr>
nmap <leader>bp :bp<cr>
inoremap jj <Esc>

"autocmd  VimEnter * silent! CocInstall coc-clangd

"voldikss/vim-floaterm
"按键映射前缀: <localleader>t。
let g:floaterm_keymap_new = '<localleader>tw'     "新建终端。
let g:floaterm_keymap_toggle = '<localleader>tt'  "终端显隐。
let g:floaterm_keymap_prev = '<localleader>tp'    "上一个终端。
let g:floaterm_keymap_next = '<localleader>tn'    "下一个终端。
let g:floaterm_keymap_kill = '<localleader>tk'    "关掉终端。
let g:floaterm_wintype = 'float'             "浮动窗口类型。
let g:floaterm_position = 'right'           "在窗口中间显示。

let g:asyncrun_open = 6

" 禁用悬浮窗口,已经在lua/user/keymap/core.lua 中配置
" autocmd CursorHold * lua vim.diagnostic.open_float(nil, {focus=false, scope="cursor"})

"vista setting
nnoremap <silent> <leader>v :Vista!!<cr>
let g:vista_sidebar_width = 60
" How each level is indented and what to prepend.
" This could make the display more compact or more spacious.
" e.g., more compact: ["▸ ", ""]
" Note: this option only works for the kind renderer, not the tree renderer.
let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]

" Executive used when opening vista sidebar without specifying it.
" See all the avaliable executives via `:echo g:vista#executives`.
" ['ale', 'coc', 'ctags', 'lcn', 'nvim_lsp', 'vim_lsc', 'vim_lsp']
let g:vista_default_executive = 'ctags'

" Set the executive for some filetypes explicitly. Use the explicit executive
" instead of the default one for these filetypes when using `:Vista` without
" specifying the executive.
let g:vista_executive_for = {
  \ 'cpp': 'vim_lsp',
  \ 'php': 'vim_lsp',
  \ }

" Declare the command including the executable and options used to generate ctags output
" for some certain filetypes.The file path will be appened to your custom command.
" For example:
let g:vista_ctags_cmd = {
      \ 'haskell': 'hasktags -x -o - -c',
      \ }

" To enable fzf's preview window set g:vista_fzf_preview.
" The elements of g:vista_fzf_preview will be passed as arguments to fzf#vim#with_preview()
" For example:
let g:vista_fzf_preview = ['right:50%']

" Ensure you have installed some decent font to show these pretty symbols, then you can enable icon for the kind.
let g:vista#renderer#enable_icon = 1

" The default icons can't be suitable for all the filetypes, you can extend it as you wish.
let g:vista#renderer#icons = {
\   "function": "\uf794",
\   "variable": "\uf71b",
\  }

" fzf
" Initialize configuration dictionary
let g:fzf_vim = {}
let g:fzf_vim.command_prefix = 'Fzf'
" This is the default option:
"   - Preview window on the right with 50% width
"   - CTRL-/ will toggle preview window.
" - Note that this array is passed as arguments to fzf#vim#with_preview function.
" - To learn more about preview window options, see `--preview-window` section of `man fzf`.
let g:fzf_vim.preview_window = ['right,50%', 'ctrl-/']

" Preview window is hidden by default. You can toggle it with ctrl-/.
" It will show on the right with 50% width, but if the width is smaller
" than 70 columns, it will show above the candidate list
let g:fzf_vim.preview_window = ['hidden,right,50%,<70(up,40%)', 'ctrl-/']

" Empty value to disable preview window altogether
let g:fzf_vim.preview_window = []

" fzf.vim needs bash to display the preview window.
" On Windows, fzf.vim will first see if bash is in $PATH, then if
" Git bash (C:\Program Files\Git\bin\bash.exe) is available.
" If you want it to use a different bash, set this variable.
"   let g:fzf_vim = {}
"   let g:fzf_vim.preview_bash = 'C:\Git\bin\bash.exe

" [Buffers] Jump to the existing window if possible
let g:fzf_vim.buffers_jump = 1

" [[B]Commits] Customize the options used by 'git log':
let g:fzf_vim.commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'

" [Tags] Command to generate tags file
let g:fzf_vim.tags_command = 'ctags -R'

" [Commands] --expect expression for directly executing the command
let g:fzf_vim.commands_expect = 'alt-enter,ctrl-x'

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-l> <plug>(fzf-complete-line)
